// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var groups = Groups.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Groups
    {
        [JsonProperty("gallery")]
        public Gallery Gallery { get; set; }

        [JsonProperty("hierarchy")]
        public Hierarchy Hierarchy { get; set; }

        [JsonProperty("inventory")]
        public Hierarchy Inventory { get; set; }

        [JsonProperty("locations")]
        public Hierarchy Locations { get; set; }

        [JsonProperty("members")]
        public Hierarchy Members { get; set; }

        [JsonProperty("notes")]
        public Notes Notes { get; set; }

        [JsonProperty("overview")]
        public Hierarchy Overview { get; set; }

        [JsonProperty("politics")]
        public Hierarchy Politics { get; set; }

        [JsonProperty("purpose")]
        public Purpose Purpose { get; set; }
    }

    public partial class Gallery
    {
        [JsonProperty("icon")]
        public string Icon { get; set; }

        [JsonProperty("label")]
        public string Label { get; set; }
    }

    public partial class Hierarchy
    {
        [JsonProperty("attributes")]
        public HierarchyAttribute[] Attributes { get; set; }

        [JsonProperty("icon")]
        public string Icon { get; set; }

        [JsonProperty("label")]
        public string Label { get; set; }
    }

    public partial class HierarchyAttribute
    {
        [JsonProperty("field_type", NullValueHandling = NullValueHandling.Ignore)]
        public FieldType? FieldType { get; set; }

        [JsonProperty("label")]
        public string Label { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class Notes
    {
        [JsonProperty("attributes")]
        public NotesAttribute[] Attributes { get; set; }

        [JsonProperty("icon")]
        public string Icon { get; set; }

        [JsonProperty("label")]
        public string Label { get; set; }
    }

    public partial class NotesAttribute
    {
        [JsonProperty("label")]
        public string Label { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class Purpose
    {
        [JsonProperty("attributes")]
        public PurposeAttribute[] Attributes { get; set; }

        [JsonProperty("icon")]
        public string Icon { get; set; }

        [JsonProperty("label")]
        public string Label { get; set; }
    }

    public partial class PurposeAttribute
    {
        [JsonProperty("label")]
        public string Label { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public enum FieldType { Link, Name, Tags, Universe };

    public partial class Groups
    {
        public static Groups FromJson(string json) => JsonConvert.DeserializeObject<Groups>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Groups self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                FieldTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class FieldTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FieldType) || t == typeof(FieldType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "link":
                    return FieldType.Link;
                case "name":
                    return FieldType.Name;
                case "tags":
                    return FieldType.Tags;
                case "universe":
                    return FieldType.Universe;
            }
            throw new Exception("Cannot unmarshal type FieldType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (FieldType)untypedValue;
            switch (value)
            {
                case FieldType.Link:
                    serializer.Serialize(writer, "link");
                    return;
                case FieldType.Name:
                    serializer.Serialize(writer, "name");
                    return;
                case FieldType.Tags:
                    serializer.Serialize(writer, "tags");
                    return;
                case FieldType.Universe:
                    serializer.Serialize(writer, "universe");
                    return;
            }
            throw new Exception("Cannot marshal type FieldType");
        }

        public static readonly FieldTypeConverter Singleton = new FieldTypeConverter();
    }
}
